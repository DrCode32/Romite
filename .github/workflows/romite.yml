name: Patch Chrome with ChromeXt

on:
  release:
    types: [published]

jobs:
  patch_and_upload:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # To allow uploading release assets

    steps:
      - name: Checkout code (optional, only needed if lspatch.jar is in a repo)
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Download Assets and Patch
        run: |
          REPO="${GITHUB_REPOSITORY}"
          RELEASE_TAG="${github.event.release.tag_name}"
          echo "Checking repository: $REPO, Release Tag: $RELEASE_TAG"

          # Function to download a specific asset if it exists
          download_asset() {
            ASSET_NAME="$1"
            DOWNLOAD_URL=$(curl -s -H "Authorization: token ${{ github.token }}" \
              "https://api.github.com/repos/${REPO}/releases/tags/${RELEASE_TAG}" | \
              jq -r ".assets[] | select(.name == \"${ASSET_NAME}\") | .browser_download_url")

            if [[ -n "$DOWNLOAD_URL" ]]; then
              echo "Downloading $ASSET_NAME from $REPO"
              curl -s -L -o "$ASSET_NAME" "$DOWNLOAD_URL"
              return 0
            else
              echo "$ASSET_NAME not found in release for $REPO"
              return 1
            fi
          }

          # Process uazo/cromite
          if [[ "$REPO" == "uazo/cromite" ]]; then
            if download_asset "x64_ChromePublic.apk"; then
              echo "Found x64_ChromePublic.apk"
              # Check for ChromeXt-signed.apk and lspatch.jar (assuming they are in the same release or accessible)
              if download_asset "ChromeXt-signed.apk" && download_asset "lspatch.jar"; then
                echo "Found ChromeXt-signed.apk and lspatch.jar, running patch command"
                java -jar lspatch.jar x64_ChromePublic.apk -d -v -m ChromeXt-signed.apk --force --injectdex
                OUTPUT_APK="Patched_ChromePublic.apk"
                mv "x64_ChromePublic_patched.apk" "$OUTPUT_APK"
              else
                echo "ChromeXt-signed.apk or lspatch.jar not found, skipping patching for uazo/cromite"
              fi
            fi
          fi

          # Process JingMatrix/ChromeXt (we only need to know if it triggered)
          if [[ "$REPO" == "JingMatrix/ChromeXt" ]]; then
            echo "New release in JingMatrix/ChromeXt, no patching action needed here."
          fi

          # Process JingMatrix/LSPatch (we only need to know if it triggered)
          if [[ "$REPO" == "JingMatrix/LSPatch" ]]; then
            echo "New release in JingMatrix/LSPatch, no patching action needed here."
          fi

      - name: Upload Patched APK to Release Assets
        if: steps.download_assets_and_patch.outcome == 'success' && env.OUTPUT_APK  # Only upload if patching was successful and output APK exists
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.OUTPUT_APK }}
          asset_name: ${{ env.OUTPUT_APK }}
          asset_content_type: application/vnd.android.package-archive
