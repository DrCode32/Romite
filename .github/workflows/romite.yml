name: Monitor and Process APK Releases

on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  workflow_dispatch:  # Allow manual triggering

jobs:
  check-and-process:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Check Latest Releases and Download Files
        id: check-releases
        run: |
          # Function to get latest release asset URL
          get_latest_release() {
            repo=$1
            asset_name=$2
            curl -s "https://api.github.com/repos/$repo/releases/latest" | \
            jq -r --arg ASSET "$asset_name" '.assets[] | select(.name == $ASSET) | .browser_download_url'
          }
          
          # Get latest release URLs
          CROMITE_URL=$(get_latest_release "uazo/cromite" "x64_ChromePublic.apk")
          CHROMEXT_URL=$(get_latest_release "JingMatrix/ChromeXt" "ChromeXt-signed.apk")
          LSPATCH_URL=$(get_latest_release "JingMatrix/LSPatch" "lspatch.jar")
          
          # Create artifacts directory
          mkdir -p artifacts
          
          # Download files if they exist and are new
          if [ ! -z "$CROMITE_URL" ]; then
            curl -L -o "artifacts/x64_ChromePublic.apk" "$CROMITE_URL"
            echo "cromite_downloaded=true" >> $GITHUB_ENV
          fi
          
          if [ ! -z "$CHROMEXT_URL" ]; then
            curl -L -o "artifacts/ChromeXt-signed.apk" "$CHROMEXT_URL"
            echo "chromext_downloaded=true" >> $GITHUB_ENV
          fi
          
          if [ ! -z "$LSPATCH_URL" ]; then
            curl -L -o "artifacts/lspatch.jar" "$LSPATCH_URL"
            echo "lspatch_downloaded=true" >> $GITHUB_ENV
          fi
          
          # Set output if all required files are downloaded
          if [ "$cromite_downloaded" = "true" ] && [ "$chromext_downloaded" = "true" ] && [ "$lspatch_downloaded" = "true" ]; then
            echo "files_ready=true" >> $GITHUB_OUTPUT
          fi

      - name: Process APK
        if: steps.check-releases.outputs.files_ready == 'true'
        run: |
          cd artifacts
          java -jar lspatch.jar x64_ChromePublic.apk -d -v -m ChromeXt-signed.apk --force --injectdex
          
      - name: Create Release
        if: steps.check-releases.outputs.files_ready == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/x64_ChromePublic-patched.apk
          name: "Auto-processed Release ${{ github.sha }}"
          tag_name: "release-${{ github.sha }}"
          body: |
            Automatically processed release combining:
            - Cromite APK
            - ChromeXt
            - LSPatch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
