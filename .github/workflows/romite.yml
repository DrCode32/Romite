name: Check Releases and Run Command

on:
  schedule:
    - cron: '0 0 * * *'  # Runs every day at midnight UTC

jobs:
  check_releases:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Get Latest Release Info
        id: get_release_info
        run: |
          echo "Getting latest release info..."
          curl -s https://api.github.com/repos/uazo/cromite/releases/latest > cromite-release.json
          curl -s https://api.github.com/repos/JingMatrix/ChromeXt/releases/latest > chromext-release.json
          curl -s https://api.github.com/repos/JingMatrix/LSPatch/releases/latest > lspatch-release.json

      - name: Check Files in Releases
        id: check_files
        run: |
          echo "Checking for required files..."
          cromite_has_files=false
          chromext_has_files=false
          lspatch_has_files=false

          if jq '.assets[].name | select(. == "x64_ChromePublic.apk")' cromite-release.json; then
            cromite_has_files=true
          fi

          if jq '.assets[].name | select(. == "ChromeXt-signed.apk")' chromext-release.json; then
            chromext_has_files=true
          fi

          if jq '.assets[].name | select(. == "lspatch.jar")' lspatch-release.json; then
            lspatch_has_files=true
          fi

          echo "cromite_has_files=$cromite_has_files" >> $GITHUB_ENV
          echo "chromext_has_files=$chromext_has_files" >> $GITHUB_ENV
          echo "lspatch_has_files=$lspatch_has_files" >> $GITHUB_ENV

      - name: Download Required Files
        if: env.cromite_has_files && env.chromext_has_files && env.lspatch_has_files
        run: |
          echo "Downloading required files..."
          cromite_asset_url=$(jq -r '.assets[] | select(.name == "x64_ChromePublic.apk").browser_download_url' cromite-release.json)
          chromext_asset_url=$(jq -r '.assets[] | select(.name == "ChromeXt-signed.apk").browser_download_url' chromext-release.json)
          lspatch_asset_url=$(jq -r '.assets[] | select(.name == "lspatch.jar").browser_download_url' lspatch-release.json)

          wget -q $cromite_asset_url -O x64_ChromePublic.apk
          wget -q $chromext_asset_url -O ChromeXt-signed.apk
          wget -q $lspatch_asset_url -O lspatch.jar

      - name: Run Java Command
        if: env.cromite_has_files && env.chromext_has_files && env.lspatch_has_files
        run: |
          echo "Running Java command..."
          java -jar lspatch.jar x64_ChromePublic.apk -d -v -m ChromeXt-signed.apk --force --injectdex

      - name: Upload Output to Release
        if: env.cromite_has_files && env.chromext_has_files && env.lspatch_has_files
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.repository.releases.latest.upload_url }}
          asset_path: ./path_to_output_file/output_file_name  # Replace with actual path and filename
          asset_name: output_file_name  # Replace with actual filename
          asset_content_type: application/octet-stream
