name: Check Repositories for New Versions

on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  workflow_dispatch:
  
jobs:
  check-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Read Latest Releases
        id: read_releases
        run: |
          if [[ -f latest_releases.txt ]]; then
            RELEASES=$(cat latest_releases.txt)
            echo "::set-output name=releases::$RELEASES"
          else
            echo "::set-output name=releases::{}"
          fi

      - name: Fetch Latest Releases
        id: fetch_releases
        run: |
          # Fetch latest release for uazo/cromite
          RESPONSE=$(curl -s https://api.github.com/repos/uazo/cromite/releases/latest)
          LATEST_TAG_CROMITE=$(echo $RESPONSE | jq -r '.tag_name')
          ASSETS_CROMITE=$(echo $RESPONSE | jq -r '.assets[].name' | grep x64_ChromePublic.apk)
          
          # Fetch latest release for JingMatrix/ChromeXt
          RESPONSE=$(curl -s https://api.github.com/repos/JingMatrix/ChromeXt/releases/latest)
          LATEST_TAG_CHROME_XT=$(echo $RESPONSE | jq -r '.tag_name')
          ASSETS_CHROME_XT=$(echo $RESPONSE | jq -r '.assets[].name' | grep ChromeXt-signed.apk)
          
          # Fetch latest release for JingMatrix/LSPatch
          RESPONSE=$(curl -s https://api.github.com/repos/JingMatrix/LSPatch/releases/latest)
          LATEST_TAG_LSPATCH=$(echo $RESPONSE | jq -r '.tag_name')
          ASSETS_LSPATCH=$(echo $RESPONSE | jq -r '.assets[].name' | grep lspatch.jar)
          
          echo "CROMITE_TAG=$LATEST_TAG_CROMITE" >> $GITHUB_ENV
          echo "CHROME_XT_TAG=$LATEST_TAG_CHROME_XT" >> $GITHUB_ENV
          echo "LSPATCH_TAG=$LATEST_TAG_LSPATCH" >> $GITHUB_ENV
          echo "CROMITE_ASSETS=$ASSETS_CROMITE" >> $GITHUB_ENV
          echo "CHROME_XT_ASSETS=$ASSETS_CHROME_XT" >> $GITHUB_ENV
          echo "LSPATCH_ASSETS=$ASSETS_LSPATCH" >> $GITHUB_ENV

      - name: Check for New Releases
        id: check_new
        run: |
          RELEASES=$(echo ${{ steps.read_releases.outputs.releases }})
          CROMITE_TAG=${{ env.CROMITE_TAG }}
          CHROME_XT_TAG=${{ env.CHROME_XT_TAG }}
          LSPATCH_TAG=${{ env.LSPATCH_TAG }}
          CROMITE_ASSETS=${{ env.CROMITE_ASSETS }}
          CHROME_XT_ASSETS=${{ env.CHROME_XT_ASSETS }}
          LSPATCH_ASSETS=${{ env.LSPATCH_ASSETS }}
          
          if [[ "$RELEASES" != *"$CROMITE_TAG"* || "$CROMITE_ASSETS" != *"x64_ChromePublic.apk"* ||
                "$RELEASES" != *"$CHROME_XT_TAG"* || "$CHROME_XT_ASSETS" != *"ChromeXt-signed.apk"* ||
                "$RELEASES" != *"$LSPATCH_TAG"* || "$LSPATCH_ASSETS" != *"lspatch.jar"* ]]; then
            echo "New release found."
            echo "::set-output name=has_new::true"
          else
            echo "No new releases."
            echo "::set-output name=has_new::false"
          fi

      - name: Download Assets
        if: steps.check_new.outputs.has_new == 'true'
        run: |
          # Download x64_ChromePublic.apk
          URL=$(curl -s https://api.github.com/repos/uazo/cromite/releases/latest | jq -r --arg ASSET "x64_ChromePublic.apk" '.assets[] | select(.name==$ASSET) | .browser_download_url')
          curl -L -o x64_ChromePublic.apk $URL
          
          # Download ChromeXt-signed.apk
          URL=$(curl -s https://api.github.com/repos/JingMatrix/ChromeXt/releases/latest | jq -r --arg ASSET "ChromeXt-signed.apk" '.assets[] | select(.name==$ASSET) | .browser_download_url')
          curl -L -o ChromeXt-signed.apk $URL
          
          # Download lspatch.jar
          URL=$(curl -s https://api.github.com/repos/JingMatrix/LSPatch/releases/latest | jq -r --arg ASSET "lspatch.jar" '.assets[] | select(.name==$ASSET) | .browser_download_url')
          curl -L -o lspatch.jar $URL

      - name: Patch APK
        if: steps.check_new.outputs.has_new == 'true'
        run: |
          java -jar lspatch.jar x64_ChromePublic.apk -d -v -m ChromeXt-signed.apk --force --injectdex
          # The output APK is 'x64_ChromePublic_patched.apk' by default

      - name: Create Release
        if: steps.check_new.outputs.has_new == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.CROMITE_TAG }}-patched
          release_name: Patched APK for ${{ env.CROMITE_TAG }}
          draft: false
          prerelease: false

      - name: Upload Patched APK
        if: steps.check_new.outputs.has_new == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: x64_ChromePublic_patched.apk
          asset_name: x64_ChromePublic_patched.apk
          asset_content_type: application/octet-stream

      - name: Update Latest Releases
        if: steps.check_new.outputs.has_new == 'true'
        run: |
          echo "CROMITE_TAG=${{ env.CROMITE_TAG }}" > latest_releases.txt
          echo "CHROME_XT_TAG=${{ env.CHROME_XT_TAG }}" >> latest_releases.txt
          echo "LSPATCH_TAG=${{ env.LSPATCH_TAG }}" >> latest_releases.txt
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git add latest_releases.txt
          git commit -m "Update latest releases"
          git push
