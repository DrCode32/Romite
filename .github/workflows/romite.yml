name: Monitor and Process APKs

on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  workflow_dispatch:  # Allow manual triggers

env:
  CROMITE_REPO: 'uazo/cromite'
  CHROMEXT_REPO: 'JingMatrix/ChromeXt'
  LSPATCH_REPO: 'JingMatrix/LSPatch'

jobs:
  check-and-process:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Create work directory
        run: mkdir -p work_dir

      - name: Check Cromite latest release
        id: cromite
        run: |
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/$CROMITE_REPO/releases/latest")
          DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name=="x64_ChromePublic.apk") | .browser_download_url')
          RELEASE_TAG=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
          echo "version=$RELEASE_TAG" >> $GITHUB_OUTPUT

      - name: Check ChromeXt latest release
        id: chromext
        run: |
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/$CHROMEXT_REPO/releases/latest")
          DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name=="ChromeXt-signed.apk") | .browser_download_url')
          RELEASE_TAG=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
          echo "version=$RELEASE_TAG" >> $GITHUB_OUTPUT

      - name: Check LSPatch latest release
        id: lspatch
        run: |
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/$LSPATCH_REPO/releases/latest")
          DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name=="lspatch.jar") | .browser_download_url')
          RELEASE_TAG=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
          echo "version=$RELEASE_TAG" >> $GITHUB_OUTPUT

      - name: Download required files
        run: |
          curl -L "${{ steps.cromite.outputs.download_url }}" -o "work_dir/x64_ChromePublic.apk"
          curl -L "${{ steps.chromext.outputs.download_url }}" -o "work_dir/ChromeXt-signed.apk"
          curl -L "${{ steps.lspatch.outputs.download_url }}" -o "work_dir/lspatch.jar"

      - name: Process APKs
        run: |
          cd work_dir
          java -jar lspatch.jar x64_ChromePublic.apk -d -v -m ChromeXt-signed.apk --force --injectdex
          echo "Processing completed"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.cromite.outputs.version }}_${{ steps.chromext.outputs.version }}"
          files: work_dir/x64_ChromePublic_lspatched.apk
          body: |
            Automated release combining:
            - Cromite version: ${{ steps.cromite.outputs.version }}
            - ChromeXt version: ${{ steps.chromext.outputs.version }}
            - LSPatch version: ${{ steps.lspatch.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: rm -rf work_dir
