name: Check Repositories for New Versions

on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  workflow_dispatch:
  
permissions:
  contents: write  # This covers both repository contents and releases

jobs:
  check-releases-and-process:
    runs-on: ubuntu-latest
    
    env:
      REPOS: |
        {
          "cromite": {"repo": "uazo/cromite", "file": "x64_ChromePublic.apk"},
          "chromext": {"repo": "JingMatrix/ChromeXt", "file": "ChromeXt-signed.apk"},
          "lspatch": {"repo": "JingMatrix/LSPatch", "file": "lspatch.jar"}
        }
      OUTPUT_APK: output.apk

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Set Up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Initialize and Get Previous Release Info
        id: prev_info
        run: |
          # Create release_info.json if it doesn't exist
          [ ! -f release_info.json ] && echo '{}' > release_info.json
          
          # Read previous info into variables
          echo "prev_info=$(cat release_info.json)" >> $GITHUB_OUTPUT

      - name: Check Latest Releases and Download Assets
        id: releases
        run: |
          download_if_new() {
            local name=$1
            local repo=$2
            local file=$3
            local prev_tag=$(echo '${{ steps.prev_info.outputs.prev_info }}' | jq -r --arg n "$name" '.[$n] // empty')
            
            # Get latest release info
            local response=$(curl -sL "https://api.github.com/repos/$repo/releases/latest")
            local tag_name=$(echo $response | jq -r '.tag_name')
            
            if [[ $tag_name != "null" && $tag_name != $prev_tag ]]; then
              local url=$(echo $response | jq -r --arg f "$file" '.assets[] | select(.name==$f) | .browser_download_url')
              if [[ -n $url ]]; then
                echo "Downloading $file from $name release"
                curl -sLO "$url"
                echo "${name}_tag=$tag_name" >> $GITHUB_OUTPUT
                return 0
              fi
            fi
            echo "${name}_tag=$prev_tag" >> $GITHUB_OUTPUT
            return 1
          }
          
          # Process each repository
          updated=false
          while IFS="=" read -r name data; do
            repo=$(echo "$data" | jq -r '.repo')
            file=$(echo "$data" | jq -r '.file')
            download_if_new "$name" "$repo" "$file" && updated=true
          done < <(echo "$REPOS" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"')
          
          # Set flag if any updates were found
          echo "updated=$updated" >> $GITHUB_OUTPUT

      - name: Process APK
        if: steps.releases.outputs.updated == 'true'
        run: |
          if [ -f "x64_ChromePublic.apk" ] && [ -f "ChromeXt-signed.apk" ] && [ -f "lspatch.jar" ]; then
            java -jar lspatch.jar x64_ChromePublic.apk -d -v -m ChromeXt-signed.apk --force --injectdex -o output.apk
          else
            echo "Missing required files"
            exit 1
          fi

      - name: Create and Upload Release
        if: steps.releases.outputs.updated == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release
          timestamp=$(date -u +%Y%m%d-%H%M%S)
          release_json=$(jq -n \
            --arg tag "v1.0.0-$timestamp" \
            --arg name "Release v1.0.0-$timestamp" \
            --arg cromite "${{ steps.releases.outputs.cromite_tag }}" \
            --arg chromext "${{ steps.releases.outputs.chromext_tag }}" \
            --arg lspatch "${{ steps.releases.outputs.lspatch_tag }}" \
            '{
              tag_name: $tag,
              name: $name,
              body: "Release created with:\nCromite: \($cromite)\nChromeXt: \($chromext)\nLSPatch: \($lspatch)"
            }')
          
          release_response=$(curl -sL \
            -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "$release_json" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/releases")
          
          # Upload asset
          upload_url=$(echo "$release_response" | jq -r '.upload_url' | sed 's/{?name,label}//')
          curl -sL \
            -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary "@output.apk" \
            "${upload_url}?name=output.apk"

      - name: Update Release Info
        if: steps.releases.outputs.updated == 'true'
        run: |
          jq -n \
            --arg cromite "${{ steps.releases.outputs.cromite_tag }}" \
            --arg chromext "${{ steps.releases.outputs.chromext_tag }}" \
            --arg lspatch "${{ steps.releases.outputs.lspatch_tag }}" \
            '{
              cromite: $cromite,
              chromext: $chromext,
              lspatch: $lspatch
            }' > release_info.json
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add release_info.json
          git commit -m "Update release info [skip ci]"
          git push
