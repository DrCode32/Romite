name: Monitor Repositories and Process Releases

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  monitor_and_process:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout release repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Monitor Repositories
        id: check_releases
        run: |
          repos=(
            "uazo/cromite"
            "JingMatrix/ChromeXt"
            "JingMatrix/LSPatch"
          )
          required_files=(
            "x64_ChromePublic.apk"
            "ChromeXt-signed.apk"
            "lspatch.jar"
          )
          new_files=""

          for repo in "${repos[@]}"; do
            releases=$(curl -s "https://api.github.com/repos/$repo/releases")
            for file in "${required_files[@]}"; do
              if echo "$releases" | jq -e '.[] | .assets[] | select(.name == "'"$file"'")' > /dev/null; then
                new_files+="$file:$repo\n"
              fi
            done
          done

          if [ -z "$new_files" ]; then
            echo "new_files=false" >> $GITHUB_ENV
          else
            echo "new_files=true" >> $GITHUB_ENV
            echo "$new_files" > new_files_list.txt
          fi

      - name: Check if processing is needed
        if: env.new_files == 'false'
        run: echo "No new files to process. Exiting..."

      - name: Download and Process Files
        if: env.new_files == 'true'
        run: |
          while IFS= read -r line; do
            file=$(echo "$line" | cut -d: -f1)
            repo=$(echo "$line" | cut -d: -f2)
            url=$(curl -s "https://api.github.com/repos/$repo/releases" | jq -r '.[] | .assets[] | select(.name == "'"$file"'") | .browser_download_url')

            curl -L -o "$file" "$url"
          done < new_files_list.txt

          java -jar lspatch.jar x64_ChromePublic.apk -d -v -m ChromeXt-signed.apk --force --injectdex

      - name: Publish to Release Repository
        if: env.new_files == 'true'
        run: |
          mkdir -p release-output
          mv patched-apk.apk release-output/
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release-output/
          git commit -m "Updated release output with new files"
          git push
