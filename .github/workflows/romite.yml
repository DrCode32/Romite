name: Check Repositories for New Versions

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight

jobs:
  check-and-process:
    runs-on: ubuntu-latest
    env:
      CRONITE_REPO: 'uazo/cromite'
      CHROME_XT_REPO: 'JingMatrix/ChromeXt'
      LS_PATCH_REPO: 'JingMatrix/LSPatch'
      OUTPUT_FILE: 'output.txt'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Fetch Latest Release Assets
        id: fetch_releases
        uses: actions/github-script@v6
        with:
          script: |
            const fetchAsset = async (repo, assetName) => {
              const response = await github.rest.repos.getLatestRelease({ owner: repo.split('/')[0], repo: repo.split('/')[1] });
              const asset = response.data.assets.find(a => a.name === assetName);
              return asset ? asset.browser_download_url : null;
            };

            const cromiteApk = await fetchAsset(process.env.CRONITE_REPO, 'x64_ChromePublic.apk');
            const chromeXtApk = await fetchAsset(process.env.CHROME_XT_REPO, 'ChromeXt-signed.apk');
            const lsPatchJar = await fetchAsset(process.env.LS_PATCH_REPO, 'lspatch.jar');

            core.setOutput('cromite_apk', cromiteApk);
            core.setOutput('chrome_xt_apk', chromeXtApk);
            core.setOutput('ls_patch_jar', lsPatchJar);

      - name: Check for New Versions
        id: check_versions
        run: |
          echo "Cromite APK: ${{ steps.fetch_releases.outputs.cromite_apk }}"
          echo "ChromeXt APK: ${{ steps.fetch_releases.outputs.chrome_xt_apk }}"
          echo "LSPatch JAR: ${{ steps.fetch_releases.outputs.ls_patch_jar }}"

          # Here you can add logic to compare versions with stored values
          # For simplicity, assume we always download and process

      - name: Download New Files
        if: steps.check_versions.outputs.trigger != 'false'
        run: |
          wget ${{ steps.fetch_releases.outputs.cromite_apk }} -O x64_ChromePublic.apk
          wget ${{ steps.fetch_releases.outputs.chrome_xt_apk }} -O ChromeXt-signed.apk
          wget ${{ steps.fetch_releases.outputs.ls_patch_jar }} -O lspatch.jar

      - name: Set Up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Run Command and Capture Output
        if: steps.check_versions.outputs.trigger != 'false'
        run: |
          java -jar lspatch.jar x64_ChromePublic.apk -d -v -m ChromeXt-signed.apk --force --injectdex > $OUTPUT_FILE

      - name: Commit and Push Output
        if: steps.check_versions.outputs.trigger != 'false'
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git add $OUTPUT_FILE
          git commit -m "Update output after processing new versions"
          git push
