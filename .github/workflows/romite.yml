name: Check for New Releases and Process APK

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight

jobs:
  check-releases-and-process:
    runs-on: ubuntu-latest
    env:
      CROMITE_REPO: 'uazo/cromite'
      CHROMEXT_REPO: 'JingMatrix/ChromeXt'
      LSPATCH_REPO: 'JingMatrix/LSPatch'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Initialize Variables
        run: |
          echo "CROMITE_TAG=$(gh release list -R $CROMITE_REPO --limit=1 --json tagName -q '.[0].tagName')" >> $GITHUB_ENV
          echo "CHROMEXT_TAG=$(gh release list -R $CHROMEXT_REPO --limit=1 --json tagName -q '.[0].tagName')" >> $GITHUB_ENV
          echo "LSPATCH_TAG=$(gh release list -R $LSPATCH_REPO --limit=1 --json tagName -q '.[0].tagName')" >> $GITHUB_ENV

      - name: Check for New Releases
        id: check_releases
        run: |
          # Check if there's a new release since the last run
          # For demonstration, assume we're checking against the last stored tag
          # In practice, you'd need to store the last checked tag, e.g., in a file
          echo "No new releases" # Replace with actual logic

      - name: Download Assets
        if: steps.check_releases.outputs.new_release == 'true'
        run: |
          # Download the assets from the new releases
          gh release download -R $CROMITE_REPO -p 'x64_ChromePublic.apk'
          gh release download -R $CHROMEXT_REPO -p 'ChromeXt-signed.apk'
          gh release download -R $LSPATCH_REPO -p 'lspatch.jar'

      - name: Process APK with lspatch.jar
        if: steps.check_releases.outputs.new_release == 'true'
        run: |
          java -jar lspatch.jar x64_ChromePublic.apk -d -v -m ChromeXt-signed.apk --force --injectdex

      - name: Create Release
        if: steps.check_releases.outputs.new_release == 'true'
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.CROMITE_TAG }}
          release_name: Release ${{ env.CROMITE_TAG }}
          draft: false
          prerelease: false

      - name: Upload Output APK to Release
        if: steps.check_releases.outputs.new_release == 'true'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: output.apk
          asset_name: processed.apk
          asset_content_type: application/octet-stream
