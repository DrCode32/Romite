name: Check Repositories for New Versions

on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  workflow_dispatch:
  
permissions:
  contents: write
  releases: write

jobs:
  check-releases-and-process:
    runs-on: ubuntu-latest
    env:
      CromiteRepo: uazo/cromite
      ChromeXtRepo: JingMatrix/ChromeXt
      LSPatchRepo: JingMatrix/LSPatch
      CromiteFile: x64_ChromePublic.apk
      ChromeXtFile: ChromeXt-signed.apk
      LSPatchFile: lspatch.jar
      OutputAPK: output.apk

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Initialize Previous Release Info
        run: |
          # Create a file to store previous release info if it doesn't exist
          touch release_info.json
          if [ ! -f release_info.json ]; then
            echo '{}' > release_info.json
          fi

      - name: Get Previous Release Info
        id: get_prev_info
        run: |
          echo "::set-output name=cromite::$(jq -r '.cromite // empty' release_info.json)"
          echo "::set-output name=chromext::$(jq -r '.chromext // empty' release_info.json)"
          echo "::set-output name=lspatch::$(jq -r '.lspatch // empty' release_info.json)"

      - name: Get Latest Release Info for Cromite
        id: get_cromite_release
        run: |
          response=$(curl -sL https://api.github.com/repos/${CromiteRepo}/releases/latest)
          tag_name=$(echo $response | jq -r '.tag_name')
          if [[ $tag_name == null ]]; then
            echo "No release found for Cromite"
            echo "::set-output name=tag::"
            echo "::set-output name=url::"
          else
            echo "::set-output name=tag::${tag_name}"
            assets=$(echo $response | jq -r '.assets[] | select(.name=="'"${CromiteFile}"'") | .browser_download_url')
            if [[ -n $assets ]]; then
              echo "::set-output name=url::${assets}"
            else
              echo "Required asset not found for Cromite"
              echo "::set-output name=url::"
            fi
          fi

      - name: Download Cromite Asset if New
        if: steps.get_cromite_release.outputs.tag != steps.get_prev_info.outputs.cromite
        run: |
          if [ -n "${{ steps.get_cromite_release.outputs.url }}" ]; then
            echo "Downloading ${CromiteFile} from Cromite release"
            curl -sLO ${{ steps.get_cromite_release.outputs.url }}
          fi

      - name: Get Latest Release Info for ChromeXt
        id: get_chromext_release
        run: |
          response=$(curl -sL https://api.github.com/repos/${ChromeXtRepo}/releases/latest)
          tag_name=$(echo $response | jq -r '.tag_name')
          if [[ $tag_name == null ]]; then
            echo "No release found for ChromeXt"
            echo "::set-output name=tag::"
            echo "::set-output name=url::"
          else
            echo "::set-output name=tag::${tag_name}"
            assets=$(echo $response | jq -r '.assets[] | select(.name=="'"${ChromeXtFile}"'") | .browser_download_url')
            if [[ -n $assets ]]; then
              echo "::set-output name=url::${assets}"
            else
              echo "Required asset not found for ChromeXt"
              echo "::set-output name=url::"
            fi
          fi

      - name: Download ChromeXt Asset if New
        if: steps.get_chromext_release.outputs.tag != steps.get_prev_info.outputs.chromext
        run: |
          if [ -n "${{ steps.get_chromext_release.outputs.url }}" ]; then
            echo "Downloading ${ChromeXtFile} from ChromeXt release"
            curl -sLO ${{ steps.get_chromext_release.outputs.url }}
          fi

      - name: Get Latest Release Info for LSPatch
        id: get_lspatch_release
        run: |
          response=$(curl -sL https://api.github.com/repos/${LSPatchRepo}/releases/latest)
          tag_name=$(echo $response | jq -r '.tag_name')
          if [[ $tag_name == null ]]; then
            echo "No release found for LSPatch"
            echo "::set-output name=tag::"
            echo "::set-output name=url::"
          else
            echo "::set-output name=tag::${tag_name}"
            assets=$(echo $response | jq -r '.assets[] | select(.name=="'"${LSPatchFile}"'") | .browser_download_url')
            if [[ -n $assets ]]; then
              echo "::set-output name=url::${assets}"
            else
              echo "Required asset not found for LSPatch"
              echo "::set-output name=url::"
            fi
          fi

      - name: Download LSPatch Asset if New
        if: steps.get_lspatch_release.outputs.tag != steps.get_prev_info.outputs.lspatch
        run: |
          if [ -n "${{ steps.get_lspatch_release.outputs.url }}" ]; then
            echo "Downloading ${LSPatchFile} from LSPatch release"
            curl -sLO ${{ steps.get_lspatch_release.outputs.url }}
          fi

      - name: Check for All Required Files
        run: |
          if [ -f "${CromiteFile}" ] && [ -f "${ChromeXtFile}" ] && [ -f "${LSPatchFile}" ]; then
            echo "All required files are present."
          else
            echo "Not all required files are present. Exiting."
            exit 1
          fi

      - name: Process APK with lspatch.jar
        run: |
          java -jar ${LSPatchFile} ${CromiteFile} -d -v -m ${ChromeXtFile} --force --injectdex -o ${OutputAPK}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.0-$(date -u +%Y%m%d-%H%M%S)
          release_name: Release v1.0.0-$(date -u +%Y%m%d-%H%M%S)
          body: |
            This release was created using:
            - Cromite: ${{ steps.get_cromite_release.outputs.tag }}
            - ChromeXt: ${{ steps.get_chromext_release.outputs.tag }}
            - LSPatch: ${{ steps.get_lspatch_release.outputs.tag }}
          draft: false
          prerelease: false

      - name: Upload APK as Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${OutputAPK}
          asset_name: output.apk
          asset_content_type: application/octet-stream

      - name: Update Release Info
        run: |
          echo "{ \
            \"cromite\": \"${{ steps.get_cromite_release.outputs.tag }}\", \
            \"chromext\": \"${{ steps.get_chromext_release.outputs.tag }}\", \
            \"lspatch\": \"${{ steps.get_lspatch_release.outputs.tag }}\" \
          }" > release_info.json
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add release_info.json
          git commit -m "Update release info"
          git push
